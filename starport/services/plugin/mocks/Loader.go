// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	chainconfig "github.com/tendermint/starport/starport/chainconfig"

	plugin "github.com/tendermint/starport/starport/services/plugin"
)

// Loader is an autogenerated mock type for the Loader type
type Loader struct {
	mock.Mock
}

// IsInstalled provides a mock function with given fields: config
func (_m *Loader) IsInstalled(config chainconfig.Plugin) bool {
	ret := _m.Called(config)

	var r0 bool
	if rf, ok := ret.Get(0).(func(chainconfig.Plugin) bool); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LoadPlugin provides a mock function with given fields: config, pluginPath
func (_m *Loader) LoadPlugin(config chainconfig.Plugin, pluginPath string) (plugin.StarportPlugin, error) {
	ret := _m.Called(config, pluginPath)

	var r0 plugin.StarportPlugin
	if rf, ok := ret.Get(0).(func(chainconfig.Plugin, string) plugin.StarportPlugin); ok {
		r0 = rf(config, pluginPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugin.StarportPlugin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(chainconfig.Plugin, string) error); ok {
		r1 = rf(config, pluginPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadSymbol provides a mock function with given fields: symbol
func (_m *Loader) LoadSymbol(symbol string) (map[string]plugin.FuncSpec, error) {
	ret := _m.Called(symbol)

	var r0 map[string]plugin.FuncSpec
	if rf, ok := ret.Get(0).(func(string) map[string]plugin.FuncSpec); ok {
		r0 = rf(symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]plugin.FuncSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
